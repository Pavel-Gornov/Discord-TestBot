import json
import math
import multiprocessing
from random import choice, randint

import discord
import numexpr
import requests
from discord import Option
from discord.ext import commands
from typing import Callable

from storage import *

bot = commands.Bot(command_prefix=SETTINGS['prefix'], intents=discord.Intents.all())

json_data = {}


# –ú–æ–¥—É–ª—å "–≠–∫–æ–Ω–æ–º–∏–∫–∏"
def json_load():
    global json_data
    with open("data.json", mode="r", encoding="utf-8") as f:
        a = json.load(f)
        print(a)
        json_data = a


def json_save():
    with open("data.json", mode="w", encoding="utf-8") as f:
        f.write(json.dumps(json_data, indent=2))


@bot.slash_command(name='–±–∞–ª–∞–Ω—Å', description='–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', guild_ids=guild_ids)
async def bal(ctx, user: Option(discord.Member, description='–£—á–∞—Å—Ç–Ω–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞', required=False)):
    print(json_data)
    user = user if user else ctx.author
    embed = discord.Embed(colour=user.colour)
    embed.set_author(name=user.name, icon_url=user.avatar.url)
    if str(user.id) in json_data:
        balance = json_data[str(user.id)]
        embed.description = f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n" \
                            f"ü™ô {balance}"
    else:
        if user == ctx.author:
            json_data[str(ctx.author.id)] = 0
            balance = 0
            embed.description = f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n" \
                                f"ü™ô {balance}"
        else:
            embed.description = "–ù–µ—Ç –∑–∞–ø–∏—Å–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."
    await ctx.respond(embed=embed)


@bot.slash_command(name='—Ç–∞–±–ª–∏—Ü–∞-–ª–∏–¥–µ—Ä–æ–≤', description='–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', guild_ids=guild_ids)
async def lb(ctx):
    embed = discord.Embed(colour=COLOR_CODES[1])
    embed.set_author(name="–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", icon_url=bot.user.avatar.url)
    s = ""
    data = sorted(json_data.items(), key=lambda x: x[1], reverse=True)
    for i in range(min(5, len(json_data))):
        s += f"**{i + 1}. {bot.get_user(int(data[i][0]))}** ‚Ä¢ ü™ô{data[i][1]}\n"
    if str(ctx.author.id) in json_data:
        user = (str(ctx.author.id), json_data[(str(ctx.author.id))])
        s += f"–í—ã –Ω–∞ {data.index(user) + 1} –º–µ—Å—Ç–µ."
    else:
        s += "–í–∞—Å –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç."
    embed.description = s
    await ctx.respond(embed=embed)


@bot.command(aliases=["–±–∞–ª–∞–Ω—Å", "–±–∞–ª", "—Å—Ç–∞—Ç", "stat", "bal"])
async def bal_(ctx, user_id=None):
    user = ctx.author
    if user_id:
        try:
            user = bot.get_user(int(user_id)) if user_id.isdigit() else bot.get_user(int(user_id[2:-1]))
        except Exception as e:
            user = None
            print(e)
            await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    if user:
        embed = discord.Embed(colour=user.colour)
        embed.set_author(name=user.name, icon_url=user.avatar.url)
        if str(user.id) in json_data:
            balance = json_data[str(user.id)]
            embed.description = f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n" \
                                f"ü™ô{balance}"
        else:
            if user == ctx.author:
                json_data[str(ctx.author.id)] = 0
                balance = 0
                embed.description = f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n" \
                                    f"ü™ô{balance}"
            else:
                embed.description = "–ù–µ—Ç –∑–∞–ø–∏—Å–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."
        await ctx.send(embed=embed)


@bot.command(aliases=["–ª–∏–¥–µ—Ä—ã", "–ª–∏–¥", "lb", "—Ç–∞–±–ª", "leaderboard"])
async def lb_(ctx):
    embed = discord.Embed(colour=COLOR_CODES[1])
    embed.set_author(name="–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", icon_url=bot.user.avatar.url)
    s = ""
    data = sorted(json_data.items(), key=lambda x: x[1], reverse=True)
    for i in range(min(5, len(json_data))):
        s += f"**{i + 1}. {bot.get_user(int(data[i][0]))}** ‚Ä¢ ü™ô{data[i][1]}\n"
    if str(ctx.author.id) in json_data:
        user = (str(ctx.author.id), json_data[(str(ctx.author.id))])
        s += f"–í—ã –Ω–∞ {data.index(user) + 1} –º–µ—Å—Ç–µ."
    else:
        s += "–í–∞—Å –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç."
    embed.description = s
    await ctx.send(embed=embed)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def api(tag, title):
    json_res = None
    if tag == "cat":
        response = requests.get("https://api.thecatapi.com/v1/images/search?mime_types=jpg,png")
        json_res = json.loads(response.text)[0]["url"]
    elif tag == "dog":
        response = requests.get("https://api.thedogapi.com/v1/images/search?mime_types=jpg,png")
        json_res = json.loads(response.text)[0]["url"]
    elif tag == "fox":
        response = requests.get("https://randomfox.ca/floof")
        json_res = json.loads(response.text)["image"]
    embed = discord.Embed(color=COLOR_CODES[1], title=title)
    embed.set_image(url=json_res)
    return embed


def rps_results(ch1, ch2):
    if ch1 == ch2:
        return "**–ù–∏—á—å—è**"
    elif ch1 == "ü™®" and ch2 == "‚úÇ" or ch1 == "‚úÇ" and ch2 == "üìú" or ch1 == "üìú" and ch2 == "ü™®":
        return "**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ü–æ–±–µ–¥–∏–ª!**"
    else:
        return "**–ë–æ—Ç –ü–æ–±–µ–¥–∏–ª!**"


def rps_results_embed(user_chose, bot_choice, random=False):
    embed = discord.Embed(colour=COLOR_CODES[1], title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    s = ""
    if random:
        s = " (–≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω–æ)"
    embed.description = f"–í–∞—à –≤—ã–±–æ—Ä: {user_chose}{s}\n" \
                        f"–í—ã–±–æ—Ä –±–æ—Ç–∞: {bot_choice}\n" \
                        f"{rps_results(user_chose, bot_choice)}"
    return embed


def run_until(seconds: int, func: Callable, *args):
    """Run a function until timeout in seconds reached."""
    with multiprocessing.Pool(processes=2) as pool:
        result = pool.apply_async(func, [*args])
        try:
            result.get(timeout=seconds)
            return result.get()
        except multiprocessing.TimeoutError:
            pass


# –°–æ–±—ã—Ç–∏—è
@bot.event
async def on_ready():
    await bot.change_presence(activity=discord.Game("Discord"))
    print(f'{bot.user.name} –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')


@bot.event
async def on_message(message):
    if message.author != bot.user:
        if bot.user.mention in message.content:
            aut = message.author
            print(aut.mention)
        if message.content.startswith("t:") and message.author.id in whitelist:
            if message.reference:
                await message.channel.send(message.content.replace("t:", ""), reference=message.reference)
            else:
                await message.channel.send(message.content.replace("t:", ""))
            await message.delete()
    await bot.process_commands(message)


# /-–∫–æ–º–∞–Ω–¥—ã
@bot.slash_command(name='—Ç–µ—Å—Ç', description='–ß—Ç–æ-—Ç–æ –¥–µ–ª–∞–µ—Ç.', guild_ids=guild_ids)
async def __test(ctx):
    await ctx.respond('–£—Å–ø–µ—à–Ω—ã–π —Ç–µ—Å—Ç!')


@bot.slash_command(name='–∞–≤–∞—Ç–∞—Ä', description='–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.', guild_ids=guild_ids)
async def avatar(ctx, user: Option(discord.Member, description='–£—á–∞—Å—Ç–Ω–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞', required=False),
                 visible: Option(str, description='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö?', choices=("–î–∞", "–ù–µ—Ç"), required=False)):
    author = user if user else ctx.author
    embed = discord.Embed(color=COLOR_CODES[1], title=f'–ê–≤–∞—Ç–∞—Ä {author}', description=f"id: {author.id}")
    embed.set_image(url=author.avatar.url)
    if visible == "–î–∞":
        await ctx.respond(embed=embed)
    else:
        await ctx.respond(embed=embed, ephemeral=True)


@bot.slash_command(name='img', description='–ü—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.', guild_ids=guild_ids)
async def img(ctx, type: Option(str, description='–¢–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ', choices=("–ö–æ—Ç—ã", "–°–æ–±–∞–∫–∏", "–õ–∏—Å—ã"), required=True),
              name: Option(str, description='–ù–∞–∑–≤–∞–Ω–∏–µ Embed`–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º', required=False)):
    try:
        title = "–°–ª—É—á–∞–π–Ω—ã–π –ö–æ—Ç"
        t = "cat"
        if type == "–ö–æ—Ç—ã":
            title = "–°–ª—É—á–∞–π–Ω—ã–π –ö–æ—Ç"
            t = "cat"
        elif type == "–°–æ–±–∞–∫–∏":
            title = "–°–ª—É—á–∞–π–Ω–∞—è –°–æ–±–∞–∫–∞"
            t = "dog"
        elif type == "–õ–∏—Å—ã":
            title = "–°–ª—É—á–∞–π–Ω–∞—è –õ–∏—Å–∞"
            t = "fox"
        if name:
            title = name
        await ctx.respond(embed=api(t, title))
    except Exception as e:
        print(e)


@bot.slash_command(name='rpc', description='–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞!', guild_ids=guild_ids)
async def rpc(ctx,
              item: Option(str, description='–í–∞—à –≤—ã–±–æ—Ä', choices=("–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã", "–ë—É–º–∞–≥–∞"), required=True)):
    d = {"–ö–∞–º–µ–Ω—å": "ü™®", "–ù–æ–∂–Ω–∏—Ü—ã": "‚úÇ", "–ë—É–º–∞–≥–∞": "üìú"}
    user_choice = d[item]
    bot_choice = choice(EMOJIS)
    await ctx.respond(embed=rps_results_embed(user_choice, bot_choice))


@bot.slash_command(name='—Å–æ–æ–±—â–µ–Ω–∏–µ', description="–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞.", guild_ids=guild_ids)
async def massage(ctx,
                  text: Option(str, description='–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.', required=True),
                  channel_id: Option(str, description='id –∫–∞–Ω–∞–ª–∞.', required=False)):
    if ctx.author.id in whitelist:
        if channel_id:
            channel = bot.get_channel(int(channel_id))
            await channel.send(text)
        else:
            await ctx.send(text)
        await ctx.respond("–£—Å–ø–µ—à–Ω–æ. :white_check_mark:", ephemeral=True)


@bot.slash_command(name='–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', description="–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞.",
                   guild_ids=guild_ids)
async def massage(ctx,
                  text: Option(str, description='–¢–µ–∫—Å—Ç (";" –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏, "‚Äî" –º–µ–∂–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏)', required=True),
                  channel_id: Option(str, description='id –∫–∞–Ω–∞–ª–∞.', required=False),
                  visible: Option(str, description='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö?', choices=("–î–∞", "–ù–µ—Ç"), required=False)):
    if ctx.author.id in whitelist:
        try:
            visible = visible != "–î–∞"
            text = text.split(";")
            res = []
            s = ""
            for i in text:
                if "‚Äî" in i:
                    res.append(i.split("‚Äî"))
                s += i + "\n"
            if channel_id:
                channel = bot.get_channel(int(channel_id))
                message = await channel.send(s)
            else:
                message = await ctx.send(s)
            await ctx.respond("–£—Å–ø–µ—à–Ω–æ. :white_check_mark:", ephemeral=visible)
            if res:
                for i in res:
                    await message.add_reaction(i[0].replace(" ", ""))
            else:
                await message.add_reaction('‚úÖ')
                await message.add_reaction('‚ùå')
        except Exception as e:
            print(e)


@bot.slash_command(name='–∫—É–±–∏–∫', description='–¢—É–ø–æ –∫—É–±–∏–∫', guild_ids=guild_ids)
async def dice(ctx, num: Option(int, description='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–Ω–µ–π –∫—É–±–∏–∫–∞', required=False)):
    if not num:
        await ctx.respond(randint(1, 6))
    else:
        await ctx.respond(randint(1, num))


@bot.command(aliases=["rand", "random", "randint", "—Ä–∞–Ω–¥", "—Å–ª—É—á–∞–π–Ω—ã–π", "—Å–ª—É—á"])
async def rand_(ctx, *args):
    if args:
        try:
            args2 = [1, 6]
            for i in args:
                if i.isdigit():
                    args2.append(int(i))
                if len(args2) == 4:
                    break
            if len(args2) == 4:
                args2.pop(0)
                args2.pop(0)
            elif len(args2) == 3:
                args2.pop(1)
            await ctx.send(randint(min(args2), max(args2)))
        except Exception as e:
            print(e)
    else:
        await ctx.send(randint(1, 6))


@bot.command(aliases=["calc", "—Å—á—ë—Ç", "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–ø–æ–¥—Å—á—ë—Ç", "–∫"])
async def calc_(ctx, *args):
    s = str()
    for i in args:
        s += i + " "
    s = s.replace("œÄ", str(math.pi))
    s = s.replace("E", str(math.e))
    try:
        res = run_until(7, numexpr.evaluate, s)
        if str(res) == "True" or str(res) == "False":
            d = {"True": "–í—ã—Ä–∞–∂–µ–Ω–∏–µ –ò—Å—Ç–∏–Ω–Ω–æ", "False": "–í—ã—Ä–∞–∂–µ–Ω–∏–µ –õ–æ–∂–Ω–æ"}
            await ctx.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {d[str(res)]}")
        elif res or res == 0:
            if "j" in str(res):
                await ctx.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {res}")
            else:
                res = round(float(res), 7)
                if str(res).split(".")[-1] == "0":
                    res = int(res)
                await ctx.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {res}")
        else:
            await ctx.reply(f"–û—Ç–≤–µ—Ç –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω")
    except Exception as e:
        print(e)
        if str(e) == "int too big to convert":
            res = run_until(5, eval, s)
            await ctx.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {res}")


@bot.command(aliases=["cat", "c", "–∫–æ—Ç", "–ö–æ—Ç", "Cat", "üê±"])
async def cat_(ctx, *title):
    s = str()
    for i in title:
        s += i + " "
    if s:
        t = s
    else:
        t = "–°–ª—É—á–∞–π–Ω—ã–π –ö–æ—Ç"
    await ctx.send(embed=api("cat", t))


@bot.command(aliases=["dog", "d", "—Å–æ–±–∞–∫–∞", "–ü—ë—Å", "–°–æ–±–∞–∫–∞", "Dog", "üê∂"])
async def dog_(ctx, *title):
    s = str()
    for i in title:
        s += i + " "
    if s:
        t = s
    else:
        t = "–°–ª—É—á–∞–π–Ω–∞—è –°–æ–±–∞–∫–∞"
    await ctx.send(embed=api("dog", t))


@bot.command(aliases=["fox", "–ª–∏—Å–∞", "–ª–∏—Å", "Fox", "–õ–∏—Å", "–õ–∏—Å–∞", "ü¶ä"])
async def fox_(ctx, *title):
    s = str()
    for i in title:
        s += i + " "
    if s:
        t = s
    else:
        t = "–°–ª—É—á–∞–π–Ω–∞—è –õ–∏—Å–∞"
    await ctx.send(embed=api("fox", t))


@bot.command(aliases=["avatar", "ava", "–∞–≤–∞", "–∞–≤–∞—Ç–∞—Ä–∫–∞"])
async def avatar_(ctx):
    author = ctx.message.author
    embed = discord.Embed(color=COLOR_CODES[1], title=f'–ê–≤–∞—Ç–∞—Ä {author}', description=f"id: {author.id}")
    embed.set_image(url=author.avatar.url)
    await ctx.send(embed=embed)


@bot.command(aliases=["me", "m", "—è"])
async def me_(ctx, *args):
    if ctx.message.author.id in whitelist and args:
        s = str()
        for i in args:
            s += i + " "
        await ctx.message.delete()
        await ctx.send(s)
    else:
        print("Nope")


@bot.command(aliases=["hello", "hi", "hey", "–ø—Ä–∏–≤–µ—Ç", "–ø—Ä–∏–≤", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"])
async def hello_(ctx):
    author = ctx.message.author
    await ctx.send(f'{choice(GREETINGS_LIST)}, {author.mention}!')


@bot.command(aliases=["rps", "–∫–º–Ω", "–∫–Ω–±", "rpc"])
async def rps_(ctx, user_chose=None):
    bot_choice = choice(EMOJIS)
    if not user_chose:
        user_chose = choice(EMOJIS)
        await ctx.send(embed=rps_results_embed(user_chose, bot_choice, random=True))
    else:
        if user_chose.lower() in ["–∫", "r", "rock", "ü™®", "–∫–∞–º–µ–Ω—å"]:
            user_chose = "ü™®"
        elif user_chose.lower() in ["–±", "p", "paper", "üìú", "–±—É–º–∞–≥–∞"]:
            user_chose = "üìú"
        elif user_chose.lower() in ["–Ω", "s", "scissors", "‚úÇ", "–Ω–æ–∂–Ω–∏—Ü—ã", "‚úÇÔ∏è"]:
            user_chose = "‚úÇ"
        if user_chose not in ["ü™®", "üìú", "‚úÇ"]:
            user_chose = choice(EMOJIS)
            await ctx.send(embed=rps_results_embed(user_chose, bot_choice, random=True))
        else:
            await ctx.send(embed=rps_results_embed(user_chose, bot_choice))


@bot.command(aliases=["http", "error", "hstat" "httpstat", "—Å–µ—Ç—å", "–∫–æ–¥"])
async def http_(ctx, num):
    if int(num) in REQUEST_CODES:
        await ctx.send(f"https://http.cat/{num}")
    else:
        await ctx.send("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–¥–∞.")


if __name__ == "__main__":
    try:
        json_load()
        bot.run(SETTINGS['token'])
    finally:
        json_save()
