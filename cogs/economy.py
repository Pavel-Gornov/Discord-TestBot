from discord.ext import commands
import discord
from storage import *
import datetime
import math

# TODO: –î–æ–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –º–æ—É–¥–ª—å
COG_NAME: final = "—ç–∫–æ–Ω–æ–º–∏–∫–∏"


def make_business_ui(user_data: dict):
    if user_data:
        embed = discord.Embed(
            title=user_data["name"],
            description=user_data["desc"])
        embed.add_field(name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", value=f"–†–∞—Å—á—ë—Ç–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {user_data['revenue']} ü™ô\n"
                                                 f"–í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤: 0 üîÑ")
        embed.set_image(url=user_data["img"])
        return embed
    return None


def make_business_skills_ui(user_data: dict):
    if user_data:
        level = int(math.log((user_data["xp"] * 0.8 / 100) + 1, 1.8)) + 1
        xp_current = round(user_data["xp"] - ((100 * (1.8 ** (level - 1) - 1)) / 0.8))
        xp_next = round(100 * (1.8 ** (level - 1)))
        embed = discord.Embed(title=f"**–ù–∞–≤—ã–∫–∏** ({user_data['name']})",
                              description=f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è: {level}\n–û–ø—ã—Ç: {xp_current}/{xp_next} üîµ\n–û—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤: {user_data['sp']} üî±")
        embed.add_field(name="–í–µ—Ç–∫–∞ –Ω–∞–≤—ã–∫–æ–≤: –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", value="üü¢ ‚Üí ‚óΩÔ∏è ‚Üí ‚óΩÔ∏è ‚Üí ‚óΩÔ∏è ‚Üí ‚óΩÔ∏è ‚Üí ‚óΩÔ∏è ‚Üí ‚óΩÔ∏è ‚Üí ‚óΩÔ∏è\n"
                                                                  f"({user_data['upgrades']['T1']} –∏–∑ 8) –°–ª–µ–¥—É—é—â–∏–π - 100 ü™ô",
                        inline=False)
        # embed.add_field(name="–í–µ—Ç–∫–∞ –Ω–∞–≤—ã–∫–æ–≤: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", value="üü¢‚û°Ô∏è‚óªÔ∏è‚û°Ô∏è‚óªÔ∏è\n"
        #                                                         "‚¨áÔ∏è„Ö§  ‚¨áÔ∏è\n"
        #                                                         "‚óªÔ∏è‚û°Ô∏è‚óªÔ∏è", inline=False)
        return embed
    return None


def make_business_collect_ui(user_data: dict):
    if user_data:
        dt = datetime.datetime.now() - datetime.datetime.fromtimestamp(user_data["last_collection"])
        embed = discord.Embed(title=f"–†–µ–∑—É–ª—å—Ç–∞—Ç", description=f"–ü–æ–ª—É—á–µ–Ω–æ: {dt.seconds} ü™ô")
        user_data["last_collection"] = datetime.datetime.now().timestamp()
        user_data['revenue'] += dt.seconds
        return embed
    return None


class BusinessSkillsView(discord.ui.View):
    def __init__(self, author_id: int, buttons=None):
        super().__init__(timeout=300)
        self.author_id = author_id

    @discord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ", style=discord.ButtonStyle.red, custom_id="close")
    async def close(self, button: discord.ui.Button, interaction: discord.Interaction):
        if interaction.user.id == self.author_id:
            await interaction.message.delete()
        else:
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º", ephemeral=True)

    @discord.ui.button(label="–ù–∞–∑–∞–¥", style=discord.ButtonStyle.primary, custom_id="skills")
    async def skills(self, button: discord.ui.Button, interaction: discord.Interaction):
        if interaction.user.id == self.author_id:
            embed = make_business_ui(economy_data[str(interaction.user.id)]["business"])
            await interaction.response.edit_message(embed=embed, view=BusinessView(self.author_id))
        else:
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º", ephemeral=True)


class BusinessView(discord.ui.View):
    def __init__(self, author_id: int, buttons=None):
        super().__init__(timeout=300)
        self.author_id = author_id
        if buttons:
            for i in range(len(buttons)):
                if buttons[i] is not None:
                    if buttons[i]:
                        self.children[i].disabled = False
                    else:
                        self.children[i].disabled = True
            n = 0
            for i in range(len(buttons)):
                if buttons[i] is None:
                    self.children.pop(n)
                else:
                    n += 1

    @discord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ", style=discord.ButtonStyle.red, custom_id="close")
    async def close(self, button: discord.ui.Button, interaction: discord.Interaction):
        if interaction.user.id == self.author_id:
            await interaction.message.delete()
        else:
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º", ephemeral=True)

    @discord.ui.button(label="–°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å", emoji="ü™ô", style=discord.ButtonStyle.gray, custom_id="collect")
    async def collect(self, button: discord.ui.Button, interaction: discord.Interaction):
        if interaction.user.id == self.author_id:
            embed = make_business_collect_ui(economy_data[str(interaction.user.id)]["business"])
            await interaction.response.send_message(embed=embed)
            embed = make_business_ui(economy_data[str(interaction.user.id)]["business"])
            await interaction.message.edit(embed=embed, view=BusinessView(self.author_id))
        else:
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º", ephemeral=True)

    @discord.ui.button(label="–ù–∞–≤—ã–∫–∏", style=discord.ButtonStyle.primary, custom_id="skills")
    async def skills(self, button: discord.ui.Button, interaction: discord.Interaction):
        if interaction.user.id == self.author_id:
            embed = make_business_skills_ui(economy_data[str(interaction.user.id)]["business"])
            await interaction.response.edit_message(embed=embed, view=BusinessSkillsView(self.author_id))
        else:
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º", ephemeral=True)


class Economy(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        print(f"–ú–æ–¥—É–ª—å {COG_NAME} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

    @commands.slash_command(name="–±–∏–∑–Ω–µ—Å")
    @discord.commands.guild_only()
    async def business(self, ctx):
        if str(ctx.author.id) in economy_data:
            user_data = economy_data[str(ctx.author.id)]["business"]
            embed = make_business_ui(user_data)
            # t = (datetime.datetime.now() - datetime.datetime.fromtimestamp(user_data["last_collection"])) >= datetime.timedelta(seconds=10)
            view = BusinessView(ctx.author.id)
            await ctx.respond(view=view, embed=embed)
        else:
            view = BusinessView(ctx.author.id, (True, None, None))
            await ctx.respond(embed=discord.Embed(title="–ü—É—Å—Ç–æ–≤–∞-—Ç–æ —Ç—É—Ç.",
                                                  description=f"–£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ </–±–∏–∑–Ω–µ—Å-—Å–æ–∑–¥–∞—Ç—å:1178417237443481712>"),
                              view=view)

    @commands.slash_command(name="–±–∏–∑–Ω–µ—Å-—Å–æ–∑–¥–∞—Ç—å")
    @discord.commands.guild_only()
    async def business_1(self, ctx,
                         name: discord.Option(str, max_length=30, default="–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", required=False),
                         description: discord.Option(str, max_length=200, default="", required=False),
                         img: discord.Option(str, max_length=200, required=False, default=None)):
        author_id = str(ctx.author.id)
        if str(ctx.author.id) in economy_data:
            view = Confirm()
            await ctx.respond("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ?", view=view,
                              ephemeral=True)
            await view.wait()
            if not view.value:
                return
        economy_data[author_id]["business"]["name"] = name
        economy_data[author_id]["business"]["desc"] = description
        economy_data[author_id]["business"]["xp"] = 0
        economy_data[author_id]["business"]["last_collection"] = datetime.datetime.now().timestamp()
        economy_data[author_id]["business"]["revenue"] = 0
        economy_data[author_id]["business"]["upgrades"] = {"T1": 1}
        try:
            if img:
                img = img.split("?")[0]
                if img.startswith("https://") and (img.endswith(".png") or img.endswith(".jpg")):
                    economy_data[author_id]["business"]["img"] = img
        except Exception as e:
            print(e)
        await ctx.respond(embed=discord.Embed(title="–£—Å–ø–µ—Ö!",
                                              description=f"–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ {name} –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ. –í–ª–∞–¥–µ–ª–µ—Ü: {ctx.author.mention}",
                                              color=COLOR_CODES["success"]))


class Confirm(discord.ui.View):
    def __init__(self):
        super().__init__()
        self.value = None

    @discord.ui.button(label="–î–∞", style=discord.ButtonStyle.green)
    async def confirm_callback(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.edit_message(content="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.", view=None)
        self.value = True
        self.stop()

    @discord.ui.button(label="–ù–µ—Ç", style=discord.ButtonStyle.red)
    async def cancel_callback(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.edit_message(content="–û—Ç–º–µ–Ω–µ–Ω–æ.", view=None)
        self.value = False
        self.stop()


def setup(bot):
    bot.add_cog(Economy(bot))
